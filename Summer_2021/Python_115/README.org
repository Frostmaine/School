#+TITLE: Python 115 Class Notes
#+AUTHOR: Matthew Yackiel
#+PROPERTY: header-args mkdirp yes :eval none

* Table of Contents :toc:
- [[#module][Module]]
  - [[#hello-world][Hello World!]]
  - [[#interactive-terminal][Interactive Terminal]]
  - [[#back-to-the-file][Back to the file]]
  - [[#executing-from-a-text-editor][Executing from a text editor]]
  - [[#some-exercises-with-pycharm][Some exercises with Pycharm]]
  - [[#comments][Comments]]
  - [[#variables][Variables]]
  - [[#errors][Errors]]
  - [[#input][Input]]
  - [[#module-1-practice-exercises][Module 1 Practice Exercises]]
- [[#module-2--data-types][Module 2 : Data Types]]
  - [[#identify-data-types][Identify Data Types]]
  - [[#numeric-types][Numeric Types]]
  - [[#strings][Strings]]
  - [[#logical-operators][Logical Operators]]
  - [[#practice-exercise][Practice Exercise]]
- [[#module-3-control-statements][Module 3: Control Statements]]
  - [[#if-statements][If Statements]]
  - [[#iteration][Iteration]]
  - [[#iteration-continued][Iteration Continued]]
- [[#module-4-functions][Module 4: Functions]]
  - [[#what-is-a-funciton][What is a funciton?]]
  - [[#passing-arguments][Passing Arguments]]
  - [[#exercises][Exercises]]

* Module
:PROPERTIES:
:header-args: :tangle ./Module_1/Lectures.py
:END:
** Hello World!
The following code blocks illustrate the evolution of test.py from class.
The typical hello world program written in python.  The print function will output to the standard output i.e. the terminal output

#+begin_src python :results output
  print("Hello Python Programmers")
#+end_src

#+RESULTS:
: Hello Python Programmers

** Interactive Terminal

You can open a terminal (command prompt) and run "python".  This will pull you into the python interactive mode.  You will be able to run python code interactively.

** Back to the file

#+begin_src python
  print("Hello Python Programmers")
  print("My name is Matthew Yackiel")
#+end_src

#+RESULTS[e81c7ceea7f91ae0ed3c42d4fc9933d01ed743f2]:
: None

This is the output when run from the terminal.  Be sure to navigate to the location of your .py file before running "python <name of file>"

#+RESULTS:
: Hello Python Programmers
: My name is Matthew Yackiel

** Executing from a text editor
You can also use any type of text editor to write code files.  That is all programs are, just text that gets interpreted by the language(python).  Pycharm does the same thing just with alot of extra bells and wistles.

#+begin_src python
  print("Hello")
#+end_src

#+RESULTS[e49a9dd31026e9d45573c7c1091fbd2e0bc248f2]:
: None

** Some exercises with Pycharm
#+begin_src python :results output :tangle ./Module_1/Lectures.py
  print("-----------------------------------")
  print(" this is a python programming class")
  print("-----------------------------------")
#+end_src

#+RESULTS[2313e4a2b7126db6e5b875585a15882806903762]:
: -----------------------------------
:  this is a python programming class
: -----------------------------------

** Comments
Comments are lines in your program that are not read at all by the language.  They are preceded by the '#' character.  Use these to write notes about different parts of your program to organize your thoughts so that when you return to them after a break from work you can still read what you were writing.  More importantly they are used to document your code to that others can read them

#+begin_src python :tangle ./Module_1/Lectures.py
# variable: is a container that holds values
#+end_src

#+RESULTS[176eebd4cbe99a8b3d2829f2b8597926781b4084]:

Below is a docstring comment. It is used in the beginning of a program to document the program.  Can be used for multiline comments.


#+begin_src python
  '''
    This is a block Comment
    It is Multiple lines
    Yay look at me go
    She
    Sells
    Sea
    Shells
    by
    the
    Sea
    Shore
  '''
#+end_src

** Variables
:PROPERTIES:
:header-args: :results output :tangle ./Module_1/Lectures.py
:END:
Variables are a structure that contains data.  Each value has a type that is assigned when you first assign it a value.  ex.

*** Integer Values

#+begin_src python 
x = 100 # numeric value
# display the variable
print(x)
#+end_src

#+RESULTS[a774b545e2068a57e00a45b73b03cb75e0fb83c2]:
: 100

*** Integer operators

#+begin_src python
  # + operator is used with numbers to perform summation
  print(195 + 61)
#+end_src

#+RESULTS:
: 256

*** String Values

Text is enclosed in a pair of single OR double quotes.  This seperates String Values from code structures.

#+begin_src python 
# Example in double quotes 
y = "Hello"
print(y)
# Example in single quotes
z = "Mahmoud"
print(z)
#+end_src

#+RESULTS:
: Hello
: Mahmoud

**** String Concatenation
#+begin_src python
  # + operator is used to concatenate 2 strings
  first_name = "Mahmoud"
  last_name = "Darwich"
  print(first_name + " " + last_name)
  initial =" K "
  print(first_name + initial + last_name)
  print(first_name + " L " + last_name)

  # using + operator with a string and a number, is illegal
  mother = "Christi is"
  # print(mother + 45) is illegal
#+end_src

#+RESULTS:
: Mahmoud Darwich
: Mahmoud K Darwich
: Mahmoud L Darwich

**** Print strings with other types
We use commas to seperate different types in the print function

#+begin_src python
  # if it is required to combine a string with a number
  # the above is fixed with
  print(mother, 45, "years old")
#+end_src

#+RESULTS:

*** Variable Naming Convention
#+begin_src python
  name="Mahmoud"
  Name='Laura'
  NAME='Lisa'  # these are all valid unique variables
  # variabls name should be started with letters or _ only
  # variables cannot be started with numbers
  # variables should contain only letters, numbers, and _

  # 8name="Darwich" is illegal, cannot start with number
  _name = "Chris" # is legal
  cat24 = "Mikky" # is legal
  # first name = "Joe" spaces are illegal
  # # first-name = "Robert" is illegal no hyphen
 #+end_src

 #+RESULTS:

*** Assigning Multiple Variables in one statement

#+begin_src python
  # Assigning multiple values to variables in one statement
  Fruit1 = Fruit2 = Fruit3 = "Apple", "Orange", "Banana"
  print(Fruit1)
  print(Fruit2)
  print(Fruit3)
#+end_src

#+RESULTS:
: ('Apple', 'Orange', 'Banana')
: ('Apple', 'Orange', 'Banana')
: ('Apple', 'Orange', 'Banana')

**** Similarly Assign 1 value to multiple variables

#+begin_src python
  # assign on single value to multiple variables
  fruit4 = fruit5 = fruit6 = "Kiwi"
  print(fruit5)
#+end_src

#+RESULTS:
: Kiwi

** Errors
:PROPERTIES:
:header-args: :results output :tangle ./Module_1/Lectures.py
:END:
*** Syntax Errors
These are easy to catch errors as they are highlighted by PyCharm.  Look for Red (in light theme) underlines for errors.

#+begin_src python
# Example: 100x = 250 syntax error because the variable names start with a number. it generates red underline
#+end_src

*** Runtime Errors
These errors are found after you execute a file.  It will appear in the output as a Traceback error with an explanation of the error type at the bottom of the error.

#+begin_src python
# Example: print(100/0) this is a mathematical impossibility, we cannot divide numbers by 0
#+end_src

*** Logical Errors
This is the most difficult to find.  Pycharm cannot help you with this (OUTSIDE OF THE DEBUGGER WHICH IS TOO ADNAVCED FOR THIS COURSE).  This is found when you get results from your program that are valid, however they are unexpected/incorrect results.

#+begin_src python 
  # add 45 + 5 and then divide by 5.
  print(45+5/ 10)
  # python takes order of operations very literally.  follow PEMDAS
  print((45+5)/10)
#+end_src

#+RESULTS[160206fcf99dbc80921f9ed1ba87278f2bd46f68]:
: 45.5
: 5.0

** Input
:PROPERTIES:
:header-args: :results output :tangle ./Module_1/Lectures.py
:END:
*** The input function
This function will ask the user for input allowing interactive input.

#+begin_src python :results silent
  # input() is a function used to get space seperated values from the user from the keyboard (always returns the value as a string)
  get_input = input("Enter your name")
r
  print("get_input is:", get_input)
#+end_src

**** Entering Non-Stings
 The input function always assumes we are typing in a string. So if we want to get number values only we must wrap the input() function in the int() function
#+begin_src python
'''
  number1 = input("Enter a number")
  number2 = input("Enter another number")
  # add number1 and number2
  print(number1 + number2) # this will output 55 because number1 and number2 are strings returned by the input function
'''
  # add number1 to number 2 properly
  # the int function is used to convert the string from input to a number
  number1 = int(input("Enter a number"))
  number2 = int(input("Enter another number"))
  print(number1 + number2)
#+end_src

** Module 1 Practice Exercises
#+begin_src python :tangle ./Module_1/practice_exercise.py
  '''
  Matthew Yackiel
  Python 115
  Module 1 Exercises
  '''

#+end_src

#+begin_src python :tangle ./Module_1/practice_exercise.py :results output
  # question 1
  print("Welcome to Python")
  print("Welcome to Computer Science")
  print("Programming is fun\n")

  # question 2
  print("Welcome to Python\n"*5)

  # question 3
  print("a\t a^2\t a^3")
  print(1,"\t",1**2,"\t",1**3)
  print(2,"\t",2**2,"\t",2**3)
  print(3,"\t",3**2,"\t",3**3)
  print(4,"\t",4**2,"\t",4**3,"\n")

  # question 4
  print((9.5*4.5-2.5*3)/(45.5-3.5),"\n")

  # question 5
  PI = 3.14
  area = 5.5**2*PI
  perimeter = 5.5*PI*2
  print("area =", area)
  print("area =", perimeter)

  print()

  # question 6
  width = 4.5
  height = 7.9
  area = width * height
  perimeter = 2 * (width + height)
  print("area =", area)
  print("perimeter =", perimeter)

  print()

  # question 7
  kilometers = 14
  minutes = 45.5
  mph = (kilometers/1.6)/(minutes/60)
  print("Speed in mph ", round(mph, 3))

#+end_src

#+RESULTS[e233244f7fcb0a4942fa3121344e37aa5195e9f6]:
#+begin_example
Welcome to Python
Welcome to Computer Science
Programming is fun

Welcome to Python
Welcome to Python
Welcome to Python
Welcome to Python
Welcome to Python

a	 a^2	 a^3
1 	 1 	 1
2 	 4 	 8
3 	 9 	 27
4 	 16 	 64 

0.8392857142857143 

area = 94.985
area = 34.54

area = 35.550000000000004
perimeter = 24.8

Speed in mph  11.538
#+end_example


* Module 2 : Data Types
:PROPERTIES:
:header-args: :tangle ./Module_2/lecture.py
:END:
** Identify Data Types
#+begin_src python
  # to identify any data type, you can use a function type()
  x = 100
  print("The type of x is:", type(x))
  y = 100.56
  print("The type of x is:", type(y))
#+end_src

#+RESULTS:
: The type of x is: <class 'int'>
: The type of x is: <class 'float'>

** Numeric Types
*** Integer
Any positive or negative number of infinite length
#+begin_src python
  # example of integer
  m = -238947020934
  print(type(m))
#+end_src

#+RESULTS:
: <class 'int'>

*** float
#+begin_src python
  # example of a float number (rational number)
  n = 35.239847
  print(type(n))
#+end_src

#+RESULTS:
: <class 'float'>

*** Complex
Complex numbers in the complex name of the form (real +- real * complex)
#+begin_src python
  # example of complex numbers
  z = 1 + 100j
  print(type(z))
#+end_src

#+RESULTS:
: <class 'complex'>

#+begin_src python
num4 = 45 + 10j # j is the imaginary part
#+end_src

#+RESULTS:

*** Scientific Notation
Numbers can be written in scientific notation as follows
#+begin_src python
  num1 = 145e5 # 145*10^5
  print(num1)

  num2 = 3.4567
  num3 = 34567e-4
  print(num3)
#+end_src

#+RESULTS:
: 14500000.0
: 3.4567

*** Converting Between Numerical Types
Convert a number, use function int(), float(), and complex()   NOTE: COMPLEX CANNOT BE CONVERTED TO FLOAT OR INT
#+begin_src python
  num5 = 14.67
  # convert to integer
  print(int(num5))
  num6 = 178
  #convert to float
  print(float(num6))
  #convert num5 and num6 to complex
  print(complex(num5))
  print(complex(num6))
  num7 = 23 + 65j
  # converting to int of float produces an error
  #print(int(num7))
#+end_src

#+RESULTS:
: 14
: 178.0
: (14.67+0j)
: (178+0j)

*** Alternate Number Systems
#+begin_src python
  # decimal numbers are 0 to 9
  # binary numbers are 0 and 1 only
  # Octal numbers are 0 to 7
  # Hexadecimal numbers are 0 - 9 and then A - F
  # to represent a binary number we preceed the number by 0b
  # to represent an octal number we preceed the number by 0o
  # to represent a hexadecimal number we preceed the number hy 0x
  num9 = 0b1110111
  print(num9) # this will print the binary number in a decimal form
  num10 = 0o1763
  print(num10)
  num11 = 0xABEF1
  print(num11)

  number1 = 755
  # convert decimal to binary, use bin() function
  num12 = bin(number1)
  print(num12)
  # convert decimal number to octal use oct() function
  num13 = oct(number1)
  print(num14)
  # convert decimal number to hexadecimal, use hex() function
  # example number2=ox12ac56, convert it to an octal number
  number2 = 0x12ac56
  print(oct(number2))
  # convert number 2 to a binary number
  print(bin(number2))
  # convert number 2 to a decimal number
  print(number2)
 #+end_src

 #+RESULTS:

*** Numeric Operators
**** Floor Division
#+begin_src python
  # floor division, it removes desimal precision from the numbers
  num14 = 111//10
  print(num14)
#+end_src

#+RESULTS:
: 11

**** Modulus
#+begin_src python
  # modulus computes the remainder of the division between 2 number, and is represented by %
  num15 = 111 % 6
  print(num15)
  print(10 % 4)
#+end_src

#+RESULTS:
: 3
: 2

**** Absolute Value
#+begin_src python
  # abs() returns positive numbers
  print(abs(-1553))
#+end_src

#+RESULTS:
: 1553

**** Divmod
#+begin_src python
  # returns the qutient and remainder of the division between 2 numbers
  divmod(120, 6)
#+end_src

#+RESULTS:

*** Assignment Operator Variants
**** additive assignment
#+begin_src python
  # += assignment operator, increment the number by a value
  num15 = 100
  num15 += 1
  print(num15)
#+end_src

#+RESULTS:
: 101

**** subtractive assignment
#+begin_src python
  # decrementing num15 by 5: num15 -= 5
  num16 = 200
  num16 -= 5 # num16= num16 - 5
  print(num16)
#+end_src

#+RESULTS:
: 195

**** multiplicative assignment
#+begin_src python
  # multiplicative assignment
  num17 = 2
  num17 *= 3
  print(num17)

  # power assignment
  num18 = 4
  num18 **= 3
  print(num18)
#+end_src

#+RESULTS:
: 6
: 64

**** quotient assignment
#+begin_src python
  # quotient assignment
  num20 = 10
  num20 /= 5
  print(num20)
#+end_src

#+RESULTS:
: 2.0

** Strings
*** String Literals
#+begin_src python :tangle no
str1 = 'Bloomsburg University of Pennsylvania'
#+end_src

#+RESULTS:

*** Indexing
To access a string use [ start index : end index ]
#+begin_src python
  str1 = "Bloomsburg University of Pennsylvania"
  # access the string index 0 to 6
  print(str1[0:6])
  # access the characters starting at index 6 and ending at index 15
  print(str1[6:15])
  # display the first 20 characters
  print(str1[:20])
  # some equivalent statements
  print(str1[:])
  print(str1)
  # displaying of string characters starting from the end of the string, we use negative indices
  print(str1[-5:]) # last 5 characters
  # display the characters at index 1 from the end
  print(str1[-12:-1])
#+end_src

#+RESULTS:
: Blooms
: burg Univ
: Bloomsburg Universit
: Bloomsburg University of Pennsylvania
: Bloomsburg University of Pennsylvania
: vania
: Pennsylvani

*** Length of a String
#+begin_src python
# to count the characters of a string, we apply the length function len()
str2="Bloomsburg University! of Pennsylvania"
# get the length of the string
getLength= len(str2)
print("the length of the str2 is ", getLength)
#+end_src

#+RESULTS:
: the length of the str2 is  38

*** Strip
#+begin_src python
# strip() function is used to remove the white spaces from the beginning and the end of a string
str3=" Hello Python Progammers "
print("The first character is ", str3[0])
# apply strip() function
str4=str3.strip()
print(" the first character or letter in the string str4 is ", str4[0])
#+end_src

#+RESULTS:
: The first character is   
:  the first character or letter in the string str4 is  H

*** Convert to upper or lower case
#+begin_src python :eval none
str5="BLOOMSBURG UNISVERSITY"
# convert upper case letters to lower case letter, low() is applied on the string
str6=str5.lower()
print(str6)
# to convert lower case letters to upper case letters, we apply upper() function
print(str2.upper())
#+end_src

#+RESULTS:

*** Replace Characters
#+begin_src python
# replace("old character", "new character") function replaces old character with a new character
# exercise replace the character "o" in str2 by a character "D"
print(str2.replace("o", "G"))
# replace Bloomsburg by Bloom
print(str2.replace("Bloomsburg", "Bloom"))
#+end_src
*** Split Strings
#+begin_src python
# split() split the string into substrings
print(str2.split())
# split the string based on a specific character
print(str2.split("!"))
# split  str2 when it finds character "y"
print(str2.split("y"))
#+end_src

#+RESULTS:

*** In operator
#+begin_src python
# in operator is used to search a string
searchStr="Bloom "  not in str2
print(searchStr)
#+end_src
*** Format Function
#+begin_src python
print("COMPSCI 115" + " "+ "is a Python Progamming course")
str7="{} COMPSCI "
num16= 115
# print(str7+num16) this will cause an error because we cannot concatenate a string with an integer
# in this case we apply a format() function, place {} where you want to add the number to the string
print(str7.format(num16))
str8= "COMPSCI {1}  is given in Fall {0}  and Spring {2}  "
courseNum=115
year1= 2021
year2=2022
print(str8.format(year1, courseNum, year2)) # year1 argument is at position 0, courseNum is at position 1 and year2 is at position2
#+end_src
** Logical Operators

#+begin_src python
  x = 100 # we assign 100 to a variable x
  x==100 # x is equal to 100
  # Comparison operators
  # < less than
  # > great than
  # < = less than or equal
  # >= greater than or equal
  # == equal
  # Boolean data type has only two values False and True only
  print(" the comparison of the values returns ",1000 != 1500)
#+end_src

** Practice Exercise
#+begin_src python
p# Question 1
# getting the input form the user and converting it to an integer
"""
for i in range(3):
    num= int(input("Enter an integer: "))
    print(num, " in the binary system is ", bin(num))
# convert the integer to a binary
"""

"""
# Question 2
# getting float values from the users and convert them to integers
floatNumber=float(input("Enter a float Number: "))

#convert FloatNumber to an integer
integerNumber= int(floatNumber)
print(floatNumber, " is  ",integerNumber, " as an integer")
"""

# Question 3
# a) create a variable and get the length of the string
string1="Department of Mathematical and Digital Sciences, Bloomsburg University of Pennsylvania"
print("the length of the string1 is ",len(string1), " characters")
# b) display characters between indices 10 and 30
print("the characters between indices 10 and 30 are:\n", string1[10:30])
print("the lower case letters of the string are as follow: \n", string1.lower())
# c) display all characters in upper case
print(" the upper case letters of the string are as follow: \n", string1.upper())
# d) replace letter "e" by letter "O"
print("we replace letter \"e\" by letter \"O\": \n ", string1.replace("e","O"))

# Question 4
string2="Bloomsburg University of Pennsylvania was established as Bloomsburg Academy in {}. In {}  it was renamed {}Bloomsburg Literary Institute {}"
year1=1839
year2=1856
year3=1990
print(string2.format(year1, year1, year1, year2 ))
# Question 5
# calculate the surface area of a cube
# get the side length from the user
side= input("enter the side length of a cube ")
for i in side:
    if i==".":
        decimalPoint=side.index(".")
        print(" the index of decimal is ", decimalPoint)
        while len(side[decimalPoint+1:])>2:
            side = input(" enter again the side length of a cube and you should use 2 digits after decimal point ")
            if len(side[decimalPoint+1:])<2:
                break;


floatinput=float(side)

area = pow(floatinput, 2)
surface = 6 * area
print(" the total surface areas of a cube of edge length", side, " is ", round(surface, 2))

#  area of one side
#area= pow(side,2)
# surface of the cube
#+end_src

* Module 3: Control Statements
:PROPERTIES:
:header-args: :tangle ./Module_3/lecture.py 
:END:
** If Statements
#+begin_src python :eval no
# if control  statement

num1 = 8
num2 = 8
if num1 > num2:
    print(" this is true 9>8")
    print(" that's great!")
# if the condition of the if statement is not true, then I want my program to go in another direction, in this case we use elif statement
elif num1 < num2:
    print( num1, " is less than ", num2)
elif num1==num2:
    print(num1, " is equal to ", num2)
print(" the program execution is completed!")

# else conditional statement is used  if none of the above conditions work
num3 =int(input(" Enter the first number >>>> "))
num4 =int(input(" Enter the second number >>>>"))
if num3 < num4:
    print(num3,"  is less than", num4)
elif num3> num4:
    print(num3,"  is greater than", num4  )
else:
    print(" both", num3,  num4,  " are  equals")

num5=600
num6=700
if num5<num6: print(" num5 is less than num6")

# shorthand for if ... else statement

num7=100
num8= 170
print( num7, "is less than ", num8) if num7< num8 else print(num7,"is not less than  ",num8)
#+end_src

#+RESULTS:

** Iteration
#+begin_src python :eval none
# while loop to execute the statements many times through iterations as long as the condition true
# you need to create a counter and initiliaze it

i=0
while i <50:

    print(" Hello Programmers", " at iteration", i)
    i+=7 #  this means i=i-7

# break statement is used to stop the while loop execution even the condition still

j=-1
while j<50:
    j+=1
    if j==10:
        break
    print(j)

# for loop is used to iterate a block of codes, you dont need to use any counter
print()
list =(2,5,6,8,9,10)
for i in list:
    print(i) # i represent each character in the string

for i in range(10):
    print("Hello Programmers at iteration", i)

inputNumber=input(" Enter a float number and make sure to take two digits after decimal points: ")
for i in inputNumber:
    if i==".":
        decimalPoint=inputNumber.index(i)
        while len(inputNumber[decimalPoint+1:])>2:
            inputNumber=input("try again to enter two digits after decimal point")
            if len(inputNumber[decimalPoint+1:])<2:
                break

print(float(inputNumber))
#+end_src

#+RESULTS:

** Iteration Continued
:PROPERTIES:
:header-args: :tangle ./Module_3/lecture_part2.py
:END:
#+begin_src python
  num1= 2
  while num1>5:
      print(" hello Programmers")

  # continue statement is used with an If statement within a loop to skip a particular iteration

  # range() function generates  numbers between range of values example range(10); this will generates numbers between 0 and 9
  """
  x= -1
  while x<9:
      x = x + 1
      if x>=3 and x<=7: # is the same if we 3<=x<=7
          continue
      print(" the value of counter is  ", x)
  """
  #break statement is used to break the loop even the condition is true
  # break the loop at iteration 5
  y=-1
  while y<20:
      y+=1
      if y==10:
          break
      print(y)
  else:
      print(" the loop is over")
  # you can use else statement with while loop
  # for variablename  in Valuesrange
  str1="Bloomsburg University"
  for x in str1:
      print(x)

  # use for loop with numeric values
  for  i in range(100):
      print("COMPSCI 115 at iteration", i)

  print()
  m=-1
  while m<99:
      m+=1
      print("COMPSCI 115 at iteration", m)

  # range() function could up to three arguments
  # range(oneValue), it will generate numbers between 0 and oneValue excluding oneValue
  # range(start, end) function receives two arguments, start value is the starting value of the range and end is the end value of the range
  # example generate numbers between 50 and 100
  print()
  for  num3 in range(50,101):
      print(num3)

  # if you want the step between numbers in the range(), you need add three arguments
  for num4 in range(1000, 1200, 8):
      print(num4)
  # nested for loops: we have two loops, one inside the other
  color=["White","Black", "Blue"]
  car=["Honda", "BMW", "Mercedes"]
  for x in color:
      for y in car:
          print(x,y)

  for s in range(80):
      if s==50:
          continue
      print(s)
  # example show all values between 0 and 80 except odd values (i.e. display even values)
  # dislay even number between 0 and 10
  for j in range(10):
      if (j%2!=0):
          print(j," is an odd")


  # display even numbers
  for k in range(80):
      if k%2!=0:
          continue
      print(k," is an even number")
  # display odd numbers
  for l in range(80):
      if l%2==0:
          continue
      print(l," is an odd number")
#+end_src

#+RESULTS:
: None


* Module 4: Functions
:PROPERTIES:
:header-args: :result output :tangle ./Module_4/lecture.py :comments link
:END:
** What is a funciton?
#+begin_src python

  """
  Module 4  function
  this is the third week
  COMPSCI 115
  """
  # function is a block of codes that does a specific taks, a function  cannot be executed unless it is invoked (called)

  # create a function
  def displayInfo():
      print("The course is Python Programming COMPSCI 115")
      print("Summer 2021")

  # when executing the codes, nothing will happen, you need to call the function in order the execute the bfunction's body

  # Call a function to execute the statements in its body
  # just use the function name followed by parentheses
  displayInfo()

#+end_src

*** Example
#+begin_src python

  def averageNumber():
      x=78
      y=90
      z=177
      sum=78+90+177
      # compute the average
      average=sum/3

      print("The average is ", average)

  # call the function
  averageNumber()
#+end_src

** Passing Arguments
#+begin_src python

  # arguments are values to be passed to a function in order to be used in its body
  # parameters is variable used in the function when it is created
  def multiplyNumbers(num1,num2, num3, num4): # num1 and num2 are variables and they are called parameters
      print("The multiplication of the two numbers is ", num1*num2)
      print(" the summation of ",num3, " and ", num4, " is ", num3+num4)

  multiplyNumbers(45,89, 109,980) # 45 and 89 are called arguments
  multiplyNumbers(100,200, 177,650)

#+end_src

*** Example
#+begin_src python

  # create function
  def displayName(firstName, lastName):
      print(firstName, lastName)

  displayName("Mahmoud","Darwich")
  displayName("Robert", "Smith")
  str1="Bloomsburg University".upper()
  #return keyword used to return results from a calling function
  def sumNumbers(num5, num6):
      sum=num5+num6
      #print("the sum of num5 and num6",sum)
     # return  sum

  #summation=sumNumbers(300,1500) # the returned results is 1800
  #print(" the sum is ", sumNumbers(300,1500))
  #x1 =sumNumbers(1,4)*4
  #print(x1)
  sumNumbers(15,5)
  #print(variable1)
  print(sumNumbers(20,40))
  def displaySummation():
      num7=sumNumbers(150,60)
      print(" the summation is ", num7)
  displaySummation()
#+end_src

** Exercises

#+begin_src python

  # exercise, create a program with  two functions
  #  1st function is called maxValue() that returns the maximum values of two floats
  # 2 nd function called getInputAndCompare(): you need create two inputs to get the two floats and call the max function then print out
  # the maximum value
  def getInputAndCompare():
      # get the values from the users
      value1=float(input("Enter the first value"))
      value2= float(input(" Enter the second value"))

      # pass num1 and num2 to max() function
      #maxValue(value1,value2)

      # display the max value at the output console
      print(" the maximum is ",maxValue(value1,value2) )
  def maxValue(variable1, variable2):
      # get the max
      if variable1>variable2:
          max=variable1
      elif variable1==variable2:
          max=variable1
      else:
          max=variable2
      # return the maximum value
      return max



  # call the function getInputAndCompare()
  getInputAndCompare()
  x=10 # x is a global variable and its scope is within the program (known inside and ouside the functions)
  def function1():
      x=99 # x is a local variable, its scope is only within the function(it is not know outside the function)

  print(x)

  def function2():
      x=250  # variable x in function2 is completely different from variable x in function


  y= 1000 # global variable

  def function3():
      y=50 # local variable
      print(" the value is ", y)

  function3()

  def function4():
      y=76 # y is also local variable
      print(" the value is ", y)
  function4()

  def fun5():
      x=5 # variable x is global variable for function 6 and is a local variable for function 5

      def fun6():
          # x=7
          print("the value of x  is ", x)


      fun6()


  fun5()
  # import the math package
  import math
  # create a function that accepts the dimensions of a room from the users,
  # calculates the area of 6 walls and return the area value
  def wall_area():
      length=float(input("Enter the wall length  "))
      width=float(input("Enter the wall width     "))
      height=float(input("Enter the wall height    "))
      wall1_area=height*length
      wall2_area=height*width
      total_walls_area= 2*wall1_area+2*wall2_area
      print("The total walls area is ", total_walls_area, "sqft")
      return total_walls_area;

  # create a function that accepts a parameter in the header, calculates  needed gallons to paint the walls
  # and show the price of the total gallons
  def gallon_and_price(area): # accepts a parameter variable area (you can use different name)
      needed_gallons=math.ceil(area/350) # use the paramater variable to calculate needed gallons
      print("The needed number of gallons is ",needed_gallons, "gallons")
      price=32
      total_price= needed_gallons*price # calculates the total price of all needed gallons to paint the room
      print("the total price of the needed gallon is $", total_price,)
  total_walls_area=wall_area() # call the method total_walls_area() and the returned value is assigned to the variable total_wallas_area
  gallon_and_price(total_walls_area)  # call the function gallon_and_price and by passing to it the returned value from
  # the function wall_area() which is total_walls_area

#+end_src
